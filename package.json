{
  "name": "enapter",
  "displayName": "Enapter",
  "description": "Enapter",
  "version": "0.0.5",
  "engines": {
    "vscode": "^1.96.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "enapter",
          "title": "Enapter",
          "icon": "resources/logo-sidebar.svg"
        }
      ]
    },
    "views": {
      "enapter": [
        {
          "id": "enapter.views.devices.active",
          "type": "webview",
          "name": "Active Device",
          "visibility": "visible",
          "initialSize": 2,
          "icon": "resources/logo-sidebar.svg"
        },
        {
          "id": "enapter.views.devices.allOnRemote",
          "name": "All Devices",
          "visibility": "visible",
          "initialSize": 1,
          "icon": "resources/logo-sidebar.svg"
        },
        {
          "id": "enapter.views.devices.recent",
          "name": "Previously Used Devices",
          "visibility": "visible",
          "initialSize": 1,
          "icon": "resources/logo-sidebar.svg"
        },
        {
          "id": "enapter.views.enbp.files",
          "name": "Enapter Blueprint Archives",
          "visibility": "visible",
          "initialSize": 1,
          "icon": "resources/logo-sidebar.svg"
        }
      ]
    },
    "commands": [
      {
        "command": "enapter.commands.Blueprints.SelectDeviceAndUploadBlueprint",
        "title": "Select Device and Upload Blueprint",
        "category": "Enapter",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "enapter.commands.Blueprints.UploadToActiveDevice",
        "title": "Upload Blueprint to Active Device",
        "category": "Enapter",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "enapter.commands.Blueprints.UploadActiveEditorManifest",
        "title": "Upload Open Manifest to Device",
        "category": "Enapter",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "enapter.commands.Devices.UploadBlueprintToDevice",
        "title": "Upload a Blueprint to the Device",
        "category": "Enapter",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "enapter.commands.Devices.RefreshRecent",
        "title": "Refresh Recent Devices",
        "category": "Enapter"
      },
      {
        "command": "enapter.commands.Devices.RemoveRecentByTreeNode",
        "title": "Remove",
        "category": "Enapter",
        "icon": "$(trash)"
      },
      {
        "command": "enapter.commands.Devices.SelectRecentAsActiveByTreeNode",
        "title": "Select as Active",
        "category": "Enapter",
        "icon": "$(play)"
      },
      {
        "command": "enapter.commands.Devices.SelectActive",
        "title": "Select Device",
        "category": "Enapter"
      },
      {
        "command": "enapter.commands.Devices.ReloadActive",
        "title": "Reload Active Device",
        "category": "Enapter",
        "icon": "$(refresh)"
      },
      {
        "command": "enapter.commands.Devices.ResetActive",
        "title": "Reset Active Device",
        "category": "Enapter",
        "icon": "$(close)"
      },
      {
        "command": "enapter.commands.InitialSetup.SetEnapterCloudContext",
        "title": "Use Enapter Cloud",
        "category": "Enapter",
        "icon": "$(cloud)"
      },
      {
        "command": "enapter.commands.InitialSetup.SetEnapterGatewayContext",
        "title": "Use Enapter Gateway",
        "category": "Enapter",
        "icon": "$(device-desktop)"
      },
      {
        "command": "enapter.commands.Setup.SetApiHost",
        "title": "Set API Host",
        "category": "Enapter"
      },
      {
        "command": "enapter.commands.Setup.SetApiKey",
        "title": "Set API Key",
        "category": "Enapter"
      },
      {
        "command": "enapter.commands.Setup.CheckConnection",
        "title": "Check Connection",
        "category": "Enapter"
      },
      {
        "command": "enapter.commands.Enbp.Mount",
        "title": "Open Enapter Blueprint Archive",
        "category": "Enapter"
      },
      {
        "command": "enapter.commands.Enbp.OpenTreeItem",
        "title": "Open",
        "category": "Enapter"
      },
      {
        "command": "enapter.commands.Devices.CopyProperty",
        "title": "Copy",
        "category": "Enapter",
        "icon": "$(copy)"
      }
    ],
    "languages": [
      {
        "id": "enbp",
        "aliases": [
          "enbp",
          "Enapter Blueprint",
          "Enapter Blueprint Archive"
        ],
        "extensions": [
          ".enbp"
        ],
        "icon": {
          "light": "resources/logo-fileicon-light.svg",
          "dark": "resources/logo-fileicon-dark.svg"
        }
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "resourceFilename == manifest.yml && enapter.context.Devices.IsActivePresent",
          "command": "enapter.commands.Blueprints.UploadActiveEditorManifest",
          "group": "navigation"
        }
      ],
      "editor/title": [
        {
          "when": "resourceFilename == manifest.yml && enapter.context.Devices.IsActivePresent",
          "command": "enapter.commands.Blueprints.UploadActiveEditorManifest",
          "group": "navigation"
        }
      ],
      "explorer/context": [
        {
          "when": "resourceLangId == enbp && !explorerResourceIsRoot",
          "command": "enapter.commands.Enbp.Mount",
          "group": "navigation"
        }
      ],
      "commandPalette": [
        {
          "command": "enapter.commands.Devices.RemoveRecentByTreeNode",
          "when": "false"
        },
        {
          "command": "enapter.commands.Devices.SelectRecentAsActiveByTreeNode",
          "when": "false"
        },
        {
          "command": "enapter.commands.InitialSetup.SetEnapterCloudContext",
          "when": "false"
        },
        {
          "command": "enapter.commands.InitialSetup.SetEnapterGatewayContext",
          "when": "false"
        },
        {
          "command": "enapter.commands.Setup.SetApiHost",
          "when": "false"
        },
        {
          "command": "enapter.commands.Setup.SetApiKey",
          "when": "false"
        },
        {
          "command": "enapter.commands.Enbp.OpenTreeItem",
          "when": "false"
        },
        {
          "command": "enapter.commands.Devices.CopyProperty",
          "when": "false"
        },
        {
          "command": "enapter.commands.Devices.UploadBlueprintToDevice",
          "when": "false"
        }
      ],
      "view/title": [
        {
          "command": "enapter.commands.Blueprints.UploadToActiveDevice",
          "when": "view == enapter.views.devices.active  && enapter.context.Devices.IsActivePresent",
          "group": "navigation@3"
        },
        {
          "command": "enapter.commands.Devices.ReloadActive",
          "when": "view == enapter.views.devices.active && enapter.context.Devices.IsActivePresent",
          "group": "navigation@2"
        },
        {
          "command": "enapter.commands.Devices.ResetActive",
          "when": "view == enapter.views.devices.active && enapter.context.Devices.IsActivePresent",
          "group": "navigation@1"
        }
      ],
      "view/item/context": [
        {
          "command": "enapter.commands.Devices.RemoveRecentByTreeNode",
          "when": "view == enapter.views.devices.recent && viewItem == enapter.viewItems.Device",
          "group": "inline"
        },
        {
          "command": "enapter.commands.Devices.SelectRecentAsActiveByTreeNode",
          "when": "view == enapter.views.devices.recent && viewItem == enapter.viewItems.Device",
          "group": "inline"
        },
        {
          "command": "enapter.commands.Devices.CopyProperty",
          "when": "view == enapter.views.devices.recent && viewItem == enapter.viewItems.DeviceProperty",
          "group": "inline"
        },
        {
          "command": "enapter.commands.Devices.RemoveRecentByTreeNode",
          "when": "view == enapter.views.devices.allOnRemote && viewItem == enapter.viewItems.Device",
          "group": "inline@1"
        },
        {
          "command": "enapter.commands.Devices.UploadBlueprintToDevice",
          "when": "view == enapter.views.devices.allOnRemote && viewItem == enapter.viewItems.Device",
          "group": "inline@2"
        },
        {
          "command": "enapter.commands.Devices.SelectRecentAsActiveByTreeNode",
          "when": "view == enapter.views.devices.allOnRemote && viewItem == enapter.viewItems.Device",
          "group": "inline@3"
        },
        {
          "command": "enapter.commands.Devices.CopyProperty",
          "when": "view == enapter.views.devices.allOnRemote && viewItem == enapter.viewItems.DeviceProperty",
          "group": "inline"
        }
      ]
    },
    "configuration": {
      "title": "Enapter",
      "type": "object",
      "properties": {
        "enapter.connectionType": {
          "type": "string",
          "default": "cloud",
          "markdownDescription": "Connection Type\n\nSelect the connection type to use with the Enapter extension. You can upload blueprints to devices provisioned to the Enapter Cloud or use your local Enapter Gateway.",
          "enum": [
            "cloud",
            "gateway"
          ],
          "enumDescriptions": [
            "Enapter Cloud",
            "Enapter Gateway"
          ],
          "order": 0
        },
        "enapter.apiHost": {
          "type": "string",
          "default": "https://api.enapter.com",
          "markdownDescription": "Enapter API Host\n\n**Default host `https://api.enapter.com` is used if the field is empty or connection type is set to Enapter Cloud.**",
          "order": 1
        },
        "enapter.apiKey": {
          "type": "string",
          "default": "",
          "markdownDescription": "Enapter API Key\n\nRefer to https://go.enapter.com/how-to-get-api-key for more information.",
          "order": 2
        },
        "enapter.mainGateway": {
          "type": "object",
          "description": "Main Enapter Gateway Settings",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the Gateway"
            },
            "address": {
              "type": "string",
              "description": "Address (host) of the Gateway"
            },
            "token": {
              "type": "string",
              "description": "API Key (token) of the Gateway"
            }
          },
          "default": {
            "name": "",
            "address": "",
            "token": ""
          },
          "additionalProperties": false
        },
        "enapter.otherGateways": {
          "type": "array",
          "title": "Other Gateways",
          "description": "Specify the Enapter Gateways you want to connect to. You can add multiple gateways additionally to the main Enapter Gateway.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "default": "",
                "markdownDescription": "Name of the Enapter Gateway"
              },
              "host": {
                "type": "string",
                "default": "",
                "markdownDescription": "Host of the Enapter Gateway"
              },
              "apiKey": {
                "type": "string",
                "default": "",
                "markdownDescription": "API Key of the Enapter Gateway"
              }
            },
            "additionalProperties": false
          }
        }
      }
    },
    "walkthroughs": [
      {
        "id": "enapter.walkthroughs.initial-setup",
        "title": "Get Started with Enapter VSCode Extension",
        "description": "This walkthrough will guide you through the initial setup of the Enapter VSCode Extension. You will need to provide your Enapter API Key and API Host.",
        "icon": "resources/logo-default.svg",
        "steps": [
          {
            "id": "initial-setup.select-connection-type",
            "title": "Select connection type",
            "description": "You can upload blueprints to devices provisioned to the Enapter Cloud (default)\n[Use Enapter Cloud ](command:enapter.commands.Setup.SetEnapterCloudConnectionType)\nOr you can use your local Enapter Gateway\n[Use Enapter Gateway](command:enapter.commands.Setup.SetEnapterGatewayConnectionType)",
            "media": {
              "markdown": "media/walkthroughs/initial-setup/select-cloud-or-gateway.md"
            },
            "completionEvents": [
              "onContext:enapter.context.ConnectionType"
            ]
          },
          {
            "id": "initial-setup.set-api-host",
            "title": "Set API Host",
            "description": "Set the API Host for the Enapter Gateway API in the extension settings.\nFor example, \"http://enapter-gateway.local/api\" or \"http://192.168.38.38/api\"\n\n[Open Settings](command:enapter.commands.Setup.SetApiHost)",
            "when": "enapter.context.ConnectionType == 'gateway'",
            "media": {
              "markdown": "media/walkthroughs/initial-setup/set-api-host-gateway.md"
            },
            "completionEvents": [
              "onCommand:enapter.commands.Setup.SetApiHost"
            ]
          },
          {
            "id": "initial-setupset-api-key-cloud",
            "title": "Set API Key",
            "description": "Set the API Key for the Enapter Cloud API in the extension settings.\n\n[Open Settings](command:enapter.commands.Setup.SetApiKey)",
            "when": "enapter.context.ConnectionType == 'cloud'",
            "media": {
              "markdown": "media/walkthroughs/initial-setup/set-api-key-cloud.md"
            },
            "completionEvents": [
              "onCommand:enapter.commands.Setup.SetApiKey"
            ]
          },
          {
            "id": "initial-setup.set-api-key-gateway",
            "title": "Set API Key",
            "description": "Set the API Key for the Enapter Gateway API in the extension settings.\n\n[Open Settings](command:enapter.commands.Setup.SetApiKey)",
            "when": "enapter.context.ConnectionType == 'gateway'",
            "media": {
              "markdown": "media/walkthroughs/initial-setup/set-api-key-gateway.md"
            },
            "completionEvents": [
              "onCommand:enapter.commands.Setup.SetApiKey"
            ]
          },
          {
            "id": "initial-setup.check-connection",
            "title": "Check Connection",
            "description": "Check the connection to the Enapter API.\n\n[Check](command:enapter.commands.Setup.CheckConnection)",
            "media": {
              "markdown": "media/walkthroughs/initial-setup/check-connection.md"
            }
          }
        ]
      }
    ],
    "colors": [
      {
        "id": "enapter.colors.green",
        "description": "Base Enapter green color",
        "defaults": {
          "dark": "#23C248",
          "light": "#23C248",
          "highContrast": "#20B644",
          "highContrastLight": "#20B644"
        }
      },
      {
        "id": "enapter.colors.Devices.OfflineIndicator",
        "description": "Enapter offline device indicator color",
        "defaults": {
          "dark": "#ffffff55",
          "light": "#0000003b",
          "highContrast": "#ffffff55",
          "highContrastLight": "#0000003b"
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && npm-run-all -p compile:*",
    "compile:base": "node esbuild.js",
    "compile:webview": "node esbuild.webview.js",
    "watch": "npm-run-all -p watch:*",
    "watch:base:esbuild": "node esbuild.js --watch",
    "watch:webview:esbuild": "node esbuild.webview.js --watch",
    "watch:base:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "watch:webview:tsc": "tsc --noEmit --watch --project tsconfig.webview.json",
    "package": "npm run check-types && npm run lint && npm-run-all -p package:*",
    "package:base": "node esbuild.js --production",
    "package:webview": "node esbuild.webview.js --production",
    "check-types": "npm-run-all -p check-types:*",
    "check-types:base": "tsc --noEmit --project tsconfig.json",
    "check-types:webview": "tsc --noEmit --project tsconfig.webview.json",
    "lint": "eslint src",
    "gen:manifests-schemas": "node manifests-schemas-to-ts.mjs"
  },
  "devDependencies": {
    "@esbuild-plugins/node-globals-polyfill": "^0.2.3",
    "@eslint/js": "^9.24.0",
    "@types/assert": "^1.5.10",
    "@types/js-yaml": "^4.0.9",
    "@types/mocha": "^10.0.9",
    "@types/node": "^22.10.1",
    "@types/vscode": "^1.95.0",
    "@types/vscode-webview": "^1.57.5",
    "@typescript-eslint/eslint-plugin": "^8.10.0",
    "@typescript-eslint/parser": "^8.7.0",
    "@vscode/test-web": "^0.0.63",
    "assert": "^2.1.0",
    "esbuild": "^0.24.0",
    "eslint": "^9.13.0",
    "glob": "^11.0.0",
    "json-schema-to-typescript": "^15.0.4",
    "mocha": "^10.7.3",
    "npm-run-all": "^4.1.5",
    "prettier": "3.4.2",
    "typescript": "^5.6.3",
    "typescript-eslint": "^8.29.1",
    "typescript-plugin-css-modules": "^5.1.0"
  },
  "dependencies": {
    "@microsoft/fast-react-wrapper": "^0.3.25",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "@vscode/webview-ui-toolkit": "^1.4.0",
    "js-yaml": "^4.1.0",
    "jszip": "^3.10.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "reflect-metadata": "^0.2.2",
    "wretch": "^2.11.0"
  },
  "bundleDependencies": [
    "reflect-metadata"
  ]
}
