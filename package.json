{
  "$schema": "./package-json-schema.json",
  "name": "enapter",
  "displayName": "Enapter",
  "description": "Enapter",
  "version": "0.0.5",
  "engines": {
    "vscode": "^1.96.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "enapter",
          "title": "Enapter",
          "icon": "resources/logo-sidebar.svg"
        }
      ]
    },
    "views": {
      "enapter": [
        {
          "id": "enapter.views.devices.active",
          "name": "Active Device",
          "visibility": "visible",
          "initialSize": 2,
          "icon": "resources/logo-sidebar.svg"
        },
        {
          "id": "enapter.views.devices.allOnRemote",
          "name": "All Devices On Site",
          "visibility": "visible",
          "initialSize": 1,
          "icon": "resources/logo-sidebar.svg"
        },
        {
          "id": "enapter.views.sites.all",
          "name": "Sites Connections",
          "visibility": "visible",
          "initialSize": 1,
          "icon": "resources/logo-sidebar.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "enapter.views.sites.all",
        "contents": "You haven't added any Enapter Cloud sites or Enapter Gateways.\n[Add new](command:enapter.commands.Sites.ConnectToNew)"
      }
    ],
    "commands": [
      {
        "command": "enapter.commands.Devices.StreamLogs",
        "title": "Stream Device Logs",
        "category": "Enapter",
        "icon": "$(debug-start)"
      },
      {
        "command": "enapter.commands.Devices.StopLogs",
        "title": "Stop Device Logs",
        "category": "Enapter",
        "icon": "$(debug-stop)"
      },
      {
        "command": "enapter.commands.Sites.ConnectToNew",
        "title": "Connect to Enapter Cloud Site or Gateway",
        "category": "Enapter",
        "icon": "$(plus)"
      },
      {
        "command": "enapter.commands.Sites.ConnectToCloudSite",
        "title": "Connect to Enapter Cloud Site",
        "category": "Enapter",
        "icon": "$(plug)"
      },
      {
        "command": "enapter.commands.Sites.ConnectToGatewaySite",
        "title": "Connect to Enapter Gateway",
        "category": "Enapter",
        "icon": "$(plug)"
      },
      {
        "command": "enapter.commands.Sites.RemoveCloudApiToken",
        "title": "Remove Enapter Cloud API Token",
        "category": "Enapter",
        "icon": "$(trash)"
      },
      {
        "command": "enapter.commands.Sites.SetCloudApiToken",
        "title": "Set Enapter Cloud API Token",
        "category": "Enapter",
        "icon": "$(key)"
      },
      {
        "command": "enapter.commands.Sites.Disconnect",
        "title": "Disconnect",
        "category": "Enapter",
        "icon": "$(debug-disconnect)"
      },
      {
        "command": "enapter.commands.Sites.DisconnectAll",
        "title": "Disconnect All Sites",
        "category": "Enapter",
        "icon": "$(debug-disconnect)"
      },
      {
        "command": "enapter.commands.Sites.Connect",
        "title": "Connect",
        "category": "Enapter",
        "icon": "$(play)"
      },
      {
        "command": "enapter.commands.Sites.CopyApiToken",
        "title": "Copy",
        "category": "Enapter",
        "icon": "$(copy)"
      },
      {
        "command": "enapter.commands.Blueprints.UploadToActiveDevice",
        "title": "Upload Blueprint to Active Device",
        "category": "Enapter",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "enapter.commands.Blueprints.UploadActiveEditorManifest",
        "title": "Upload Open Manifest to Device",
        "category": "Enapter",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "enapter.commands.Devices.Connect",
        "title": "Connect to Device",
        "category": "Enapter",
        "icon": "$(plug)"
      },
      {
        "command": "enapter.commands.Devices.Disconnect",
        "title": "Disconnect Device",
        "category": "Enapter",
        "icon": "$(debug-disconnect)"
      },
      {
        "command": "enapter.commands.Devices.UploadBlueprint",
        "title": "Upload a Blueprint to the Device",
        "category": "Enapter",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "enapter.commands.Devices.ReloadActive",
        "title": "Reload Active Device",
        "category": "Enapter",
        "icon": "$(refresh)"
      },
      {
        "command": "enapter.commands.Devices.ResetActive",
        "title": "Reset Active Device",
        "category": "Enapter",
        "icon": "$(close)"
      },
      {
        "command": "enapter.commands.Enbp.Mount",
        "title": "Open Enapter Blueprint Archive",
        "category": "Enapter"
      },
      {
        "command": "enapter.commands.Enbp.OpenTreeItem",
        "title": "Open",
        "category": "Enapter"
      },
      {
        "command": "enapter.commands.Common.CopyProperty",
        "title": "Copy",
        "category": "Enapter",
        "icon": "$(copy)"
      },
      {
        "command": "enapter.commands.Channels.DeviceLogs.Reveal",
        "title": "Reveal Device Logs Panel",
        "category": "Enapter",
        "icon": "$(eye)"
      }
    ],
    "languages": [
      {
        "id": "enbp",
        "aliases": [
          "enbp",
          "Enapter Blueprint",
          "Enapter Blueprint Archive"
        ],
        "extensions": [
          ".enbp"
        ],
        "icon": {
          "light": "resources/logo-fileicon-light.svg",
          "dark": "resources/logo-fileicon-dark.svg"
        }
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "resourceFilename == manifest.yml && enapter.context.Devices.IsActivePresent",
          "command": "enapter.commands.Blueprints.UploadActiveEditorManifest",
          "group": "navigation"
        }
      ],
      "editor/title": [
        {
          "when": "resourceFilename == manifest.yml && enapter.context.Devices.IsActivePresent",
          "command": "enapter.commands.Blueprints.UploadActiveEditorManifest",
          "group": "navigation"
        }
      ],
      "explorer/context": [
        {
          "when": "resourceLangId == enbp && !explorerResourceIsRoot",
          "command": "enapter.commands.Enbp.Mount",
          "group": "navigation"
        }
      ],
      "commandPalette": [
        {
          "command": "enapter.commands.Enbp.OpenTreeItem",
          "when": "false"
        },
        {
          "command": "enapter.commands.Common.CopyProperty",
          "when": "false"
        },
        {
          "command": "enapter.commands.Devices.UploadBlueprint",
          "when": "false"
        },
        {
          "command": "enapter.commands.Sites.Connect",
          "when": "false"
        },
        {
          "command": "enapter.commands.Sites.Disconnect",
          "when": "false"
        },
        {
          "command": "enapter.commands.Devices.Connect",
          "when": "never"
        }
      ],
      "view/title": [
        {
          "command": "enapter.commands.Blueprints.UploadToActiveDevice",
          "when": "view == enapter.views.devices.active  && enapter.context.Devices.IsActivePresent",
          "group": "navigation@3"
        },
        {
          "command": "enapter.commands.Devices.ReloadActive",
          "when": "view == enapter.views.devices.active && enapter.context.Devices.IsActivePresent",
          "group": "navigation@2"
        },
        {
          "command": "enapter.commands.Devices.ResetActive",
          "when": "view == enapter.views.devices.active && enapter.context.Devices.IsActivePresent",
          "group": "navigation@1"
        },
        {
          "command": "enapter.commands.Sites.ConnectToNew",
          "when": "view == enapter.views.sites.all",
          "group": "navigation@1"
        },
        {
          "command": "enapter.commands.Sites.SetCloudApiToken",
          "when": "view == enapter.views.sites.all"
        }
      ],
      "view/item/context": [
        {
          "command": "enapter.commands.Devices.StreamLogs",
          "when": "viewItem == enapter.viewItems.ActiveDevice.LogsNode && !enapter.context.Devices.IsLogging",
          "group": "inline"
        },
        {
          "command": "enapter.commands.Devices.StopLogs",
          "when": "viewItem == enapter.viewItems.ActiveDevice.LogsNode && enapter.context.Devices.IsLogging",
          "group": "inline"
        },
        {
          "command": "enapter.commands.Channels.DeviceLogs.Reveal",
          "when": "viewItem == enapter.viewItems.ActiveDevice.LogsNode",
          "group": "inline"
        },
        {
          "command": "enapter.commands.Sites.Disconnect",
          "when": "view == enapter.views.sites.all && viewItem == enapter.viewItems.Site",
          "group": "inline@1"
        },
        {
          "command": "enapter.commands.Sites.Connect",
          "when": "view == enapter.views.sites.all && viewItem == enapter.viewItems.Site",
          "group": "inline@2"
        },
        {
          "command": "enapter.commands.Sites.CopyApiToken",
          "when": "view == enapter.views.sites.all && viewItem == enapter.viewItems.ApiTokenProperty",
          "group": "inline@1"
        },
        {
          "command": "enapter.commands.Devices.UploadBlueprint",
          "when": "view == enapter.views.devices.allOnRemote && (viewItem == enapter.viewItems.Device || viewItem == enapter.viewItems.ConnectedDevice)",
          "group": "inline@1"
        },
        {
          "command": "enapter.commands.Common.CopyProperty",
          "when": "viewItem == enapter.viewItems.PropertyNode",
          "group": "inline"
        },
        {
          "command": "enapter.commands.Devices.Connect",
          "when": "view == enapter.views.devices.allOnRemote && viewItem == enapter.viewItems.Device",
          "group": "inline@2"
        },
        {
          "command": "enapter.commands.Devices.Disconnect",
          "when": "view == enapter.views.devices.allOnRemote && viewItem == enapter.viewItems.ConnectedDevice",
          "group": "inline@2"
        }
      ]
    },
    "colors": [
      {
        "id": "enapter.colors.green",
        "description": "Base Enapter green color",
        "defaults": {
          "dark": "#23C248",
          "light": "#23C248",
          "highContrast": "#20B644",
          "highContrastLight": "#20B644"
        }
      },
      {
        "id": "enapter.colors.Devices.OfflineIndicator",
        "description": "Enapter offline device indicator color",
        "defaults": {
          "dark": "#ffffff55",
          "light": "#0000003b",
          "highContrast": "#ffffff55",
          "highContrastLight": "#0000003b"
        }
      }
    ],
    "icons": {
      "enapter-gateway": {
        "description": "Enapter Gateway icon",
        "default": {
          "fontPath": "resources/Lucide.woff2",
          "fontCharacter": "\\e3c3"
        }
      },
      "enapter-cloud": {
        "description": "Enapter Cloud icon",
        "default": {
          "fontPath": "resources/Lucide.woff2",
          "fontCharacter": "\\e08c"
        }
      },
      "enapter-id": {
        "description": "Enapter ID icon",
        "default": {
          "fontPath": "resources/Lucide.woff2",
          "fontCharacter": "\\e0f3"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && npm-run-all -p compile:*",
    "compile:base": "node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:base:esbuild": "node esbuild.js --watch",
    "watch:base:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && npm-run-all -p package:*",
    "package:base": "node esbuild.js --production",
    "check-types": "npm-run-all -p check-types:*",
    "check-types:base": "tsc --noEmit --project tsconfig.json",
    "lint": "eslint src",
    "gen:manifests-schemas": "node manifests-schemas-to-ts.mjs"
  },
  "devDependencies": {
    "@esbuild-plugins/node-globals-polyfill": "^0.2.3",
    "@eslint/js": "^9.24.0",
    "@types/assert": "^1.5.10",
    "@types/js-yaml": "^4.0.9",
    "@types/mocha": "^10.0.9",
    "@types/node": "^22.10.1",
    "@types/vscode": "^1.95.0",
    "@types/vscode-webview": "^1.57.5",
    "@types/ws": "^8.18.1",
    "@typescript-eslint/eslint-plugin": "^8.10.0",
    "@typescript-eslint/parser": "^8.7.0",
    "@vscode/test-web": "^0.0.63",
    "assert": "^2.1.0",
    "esbuild": "^0.24.0",
    "eslint": "^9.13.0",
    "glob": "^11.0.0",
    "json-schema-to-typescript": "^15.0.4",
    "mocha": "^10.7.3",
    "npm-run-all": "^4.1.5",
    "prettier": "3.4.2",
    "typescript": "^5.6.3",
    "typescript-eslint": "^8.29.1"
  },
  "dependencies": {
    "@microsoft/fast-react-wrapper": "^0.3.25",
    "@vscode/webview-ui-toolkit": "^1.4.0",
    "js-yaml": "^4.1.0",
    "jszip": "^3.10.1",
    "reflect-metadata": "^0.2.2",
    "wretch": "^2.11.0",
    "ws": "^8.18.2",
    "zod": "^3.24.3"
  },
  "bundleDependencies": [
    "reflect-metadata"
  ]
}
